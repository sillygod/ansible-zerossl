name: Test Automation and Quality Gates

# Test Strategy:
# - Unit Tests: Functional validation (no coverage)
# - Component Tests: Integration validation (no coverage)
# - Performance Tests: Speed/concurrency metrics (no coverage)
# - Security Tests: Security validation (no coverage)
# - Comprehensive Analysis: ONLY place for coverage collection (unit+component)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
#  schedule:
    # Run daily at 2 AM UTC for continuous monitoring
#    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.12'
  ANSIBLE_MINIMUM_VERSION: '8.0.0'

jobs:
  quality-gates:
    name: Quality Gates and Performance Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install from auto-generated requirements-dev.txt (includes all dependencies)
        pip install -r requirements-dev.txt

    - name: Run Test Quality Gates
      run: |
        python scripts/test_quality_gates.py

    - name: Run Performance Validation
      run: |
        python scripts/performance_validation.py

    - name: Upload Quality Gate Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quality-gate-results
        path: quality_gate_results.json

    - name: Upload Performance Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: performance_results.json

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality-gates
    timeout-minutes: 8

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install from auto-generated requirements-dev.txt (includes all dependencies)
        pip install -r requirements-dev.txt

    - name: Run Unit Tests
      run: |
        pytest tests/unit/ \
          -v \
          --tb=short \
          --maxfail=5

  component-tests:
    name: Component Tests
    runs-on: ubuntu-latest
    needs: quality-gates
    timeout-minutes: 8

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install from auto-generated requirements-dev.txt (includes all dependencies)
        pip install -r requirements-dev.txt

    - name: Run Component Tests
      run: |
        pytest tests/component/ \
          -v \
          --tb=short \
          --maxfail=5 \
          --cov-fail-under=10

  performance-tests:
    name: Performance Tests (No Coverage)
    runs-on: ubuntu-latest
    needs: quality-gates
    timeout-minutes: 8

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install from auto-generated requirements-dev.txt (includes all dependencies)
        pip install -r requirements-dev.txt

    - name: Run Performance Tests
      run: |
        pytest tests/performance/ \
          -v \
          --tb=short \
          --maxfail=5 \
          --durations=10

    - name: Upload Performance Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: performance_results.json

  security-tests:
    name: Security Tests (No Coverage)
    runs-on: ubuntu-latest
    needs: quality-gates
    timeout-minutes: 8

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install from auto-generated requirements-dev.txt (includes all dependencies)
        pip install -r requirements-dev.txt

    - name: Run Security Tests
      run: |
        pytest tests/security/ \
          -v \
          --tb=short \
          --maxfail=5 \
          --cov-fail-under=10

    - name: Upload Security Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-test-results
        path: security_audit_results.json

  coverage-automation:
    name: Coverage Automation
    runs-on: ubuntu-latest
    needs: [unit-tests, component-tests, performance-tests, security-tests]
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install from auto-generated requirements-dev.txt (includes all dependencies)
        pip install -r requirements-dev.txt

    - name: Run Coverage Automation
      run: |
        python scripts/coverage_automation.py

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        fail_ci_if_error: true
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}
        verbose: true

    - name: Upload Coverage JSON
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-json
        path: coverage.json

    - name: Upload Coverage XML
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-xml
        path: coverage.xml


  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit Security Scan
      run: |
        bandit -c .bandit -r plugins/ -f json -o bandit-report.json || true
        bandit -c .bandit -r plugins/ -f txt

    - name: Run Safety Check
      run: |
        # Use legacy safety check with requirements file (works without auth)
        safety check -r requirements-dev.txt --output json > safety-report.json 2>&1 || true
        safety check -r requirements-dev.txt --output text

    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  notify-on-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [quality-gates, unit-tests, component-tests, performance-tests, security-tests, coverage-automation]
    if: failure()

    steps:
    - name: Notify on Failure
      uses: 8398a7/action-slack@v3
      if: github.ref == 'refs/heads/main'
      with:
        status: failure
        channel: '#ci-cd'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: |
          Test Automation Failed on main branch
          Repository: ${{ github.repository }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}

  report-summary:
    name: Generate Test Report Summary
    runs-on: ubuntu-latest
    needs: [quality-gates, unit-tests, component-tests, performance-tests, security-tests, coverage-automation]
    if: always()

    steps:
    - name: Download All Artifacts
      uses: actions/download-artifact@v4

    - name: Generate Summary Report
      run: |
        echo "# Test Automation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- Quality Gates: ${{ needs.quality-gates.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Component Tests: ${{ needs.component-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security Tests: ${{ needs.security-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Comprehensive Coverage: ${{ needs.comprehensive-coverage.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Coverage Automation: ${{ needs.coverage-automation.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Artifacts Generated" >> $GITHUB_STEP_SUMMARY
        echo "- Coverage reports (HTML, XML, JSON)" >> $GITHUB_STEP_SUMMARY
        echo "- Quality gate results" >> $GITHUB_STEP_SUMMARY
        echo "- Performance validation results" >> $GITHUB_STEP_SUMMARY
        echo "- Security scan reports" >> $GITHUB_STEP_SUMMARY
